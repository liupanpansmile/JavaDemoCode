<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.oneapm.mapping.userMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <resultMap id="users" type="com.oneapm.model.User" autoMapping="true">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="email" property="email" />
    </resultMap>

    <!--add user-->
    <select id="addUser" parameterType="com.oneapm.model.User"
            resultType="int">
       INSERT INTO user (username,password,email) VALUES (#{username},#{password},#{email})
    </select>

    <!--delete user     -->
    <select id="deleteUser" parameterType="String"
            resultType="int">
        DELETE *  FROM user WHERE username= #{username}
    </select>


    <!--update user     -->
    <select id="updateUser" parameterType="com.oneapm.model.User"
            resultType="int">
        UPDATE user set username = #{username} and password=#{password} and email=#{email} where id = #{id};
    </select>

    <!--get user by username     -->
    <select id="getUser" parameterType="String"
            resultType="com.oneapm.model.User">
        select * from user where username=#{username}
    </select>

    <!--get all users     -->
    <select id="getAllUsers"   resultMap="users">
        SELECT *  FROM user
    </select>



</mapper>